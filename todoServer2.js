/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const path = require('path')
const app = express();
const cors = require('cors')

app.use(cors());
app.use(express.json())

var totalNum = 0;
app.get('/todos', (req, res)=>{
  var jsonBody = {}

  fs.readFile("./files/b.json", 'utf-8', (err, data)=>{
    if(err)
    {
      return;
    }
    jsonBody = JSON.parse(data)
    res.send(JSON.stringify(jsonBody))
  })
})

app.get('/todos/:id', (req, res)=>{
  var id = parseInt(req.params.id);
  var exists = false;
  var jsonBody = {}
  fs.readFile("./files/b.json", 'utf-8', (err, data)=>{
    if(err)
    {
      return;
    }
    jsonBody = JSON.parse(data)


    for(var i =0; i<jsonBody.length; i++)
    {
      if(jsonBody[i].id == id)
      {
        exists = true;
        res.json({
          id : jsonBody[i].id,
          title : jsonBody[i].title,
          description : jsonBody[i].description,
          completed : jsonBody[i].completed
        })
        break;
      }
    }

    if(!exists)
    {
      res.status(404).send("Not found")
    }
  })
})

app.post('/todos', (req, res)=>{
  totalNum ++;
  var createdTodoId = totalNum;

  const createdTodo = {
    id : createdTodoId,
    title : req.body.title,
    description : req.body.description,
    completed : false
  }

  fs.readFile("./files/b.json", 'utf-8', (err, data)=>{
    if(err)
    {
      return;
    }
    var jsonBody = JSON.parse(data)

    
  for(var i =0; i<jsonBody.length; i++)
  {
    if(jsonBody[i].id == createdTodoId)
    {
      createdTodo.id += Math.floor(Math.random() * 1000000) ;
    }
  }

    jsonBody.push(createdTodo)

    fs.writeFile("./files/b.json",JSON.stringify(jsonBody),'utf-8',(err)=>{
      if(err) throw err;
      else
      res.status(201).send(createdTodo)
    })
  })

})

app.put('/todos/:id', (req, res)=>{
  var reqId = parseInt(req.params.id);

  var inputBody = req.body;
  var exists = false;
  var jsonBody = {}
  fs.readFile("./files/b.json", 'utf-8', (err, data)=>{
    if(err)
    {
      return;
    }
    jsonBody = JSON.parse(data);


    for(var i =0; i<jsonBody.length; i++)
    {
      if(jsonBody[i].id === reqId)
      {
        exists = true;
        jsonBody[i].completed = inputBody.completed;
        break;
      }
    }
    if(!exists)
    {
      res.status(404).send("Not found")
    }
    else{
      fs.writeFile("./files/b.json",JSON.stringify(jsonBody),'utf-8', (err)=>{
        if(err) throw err;
        res.send("Found and updated")
      })
    }
  })
  })

app.delete('/todos/:id', (req, res)=>{
  var id = parseInt(req.params.id);
  var exists = false;
  var jsonBody = {}
  fs.readFile("./files/b.json", 'utf-8', (err, data)=>{
    if(err)
    {
      return;
    }
    jsonBody = JSON.parse(data)


    for(var i =0; i<jsonBody.length;i++)
    {
      if(jsonBody[i].id === id)
      {
        exists = true;
        jsonBody.splice(i,1);
        break;
      }
    }

    if(!exists)
    {
      res.status(404).send("Not found")
    }
    else{
      fs.writeFile("./files/b.json",JSON.stringify(jsonBody),'utf-8',(err)=>{
        if(err) throw err;
        res.send(jsonBody)
      })
    }
  })
})

// app.get('/',(req,res)=>{
//   res.sendFile(path.join(__dirname ,"index.html"))
// })

app.listen(3000,()=>{
  console.log("Listening")
})
